<launch>
  <arg name="mav_name" default="elios"/>
  <!-- For VLP16: use https://github.com/unr-arl/velodyne_simulator/tree/VLP16_lightweight -->
  <!-- For OS1-64: use https://github.com/unr-arl/lidar_simulator -->
  <arg name="lidar_type" default="VLP16"/> <!-- VLP16 or OS1_64 -->
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true" />
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="use_sim_time" value="$(arg use_sim_time)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <group ns="$(arg mav_name)_$(arg lidar_type)">

    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)_$(arg lidar_type)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="0.0" />
      <arg name="y" value="0.0" />
      <arg name="z" value="0.0" />      
    </include>

    <node name="acc_command_converter" pkg="rotors_control" type="acc_command_converter" output="screen">
      <!-- Acceleration command is in vehicle frame (true) or world frame (false) -->
      <param name="use_vehicle_frame" value="true"/>
      <param name="use_yaw_stabilize" value="false"/>
      <remap from="odometry" to="odometry_sensor1/odometry" />
      <!-- <remap from="command/rate_thrust" to="input_acceleration_topic" /> -->
      <!-- <remap from="command/roll_pitch_yawrate_thrust" to="output_roll_pitch_yawrate_thrust_topic" /> -->
      <param name="eps_explore" value="0.0"/>
      <param name="noise_x" value="0.0"/>
      <param name="noise_y" value="0.0"/>
      <param name="noise_z" value="0.0"/>
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name)_$(arg lidar_type).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/pid_position_$(arg mav_name).yaml" />
    </node>    
    
    <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
      <rosparam
        command="load" file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name)_$(arg lidar_type).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>

    <!-- <node name="wait_for_gazebo" pkg="ctrl_planner" type="wait_for_gazebo" output="screen"/> -->

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>
</launch>
